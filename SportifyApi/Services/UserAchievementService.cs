using Microsoft.EntityFrameworkCore;
using SportifyApi.Data;
using SportifyApi.Dtos;
using SportifyApi.Interfaces;
using SportifyApi.Models;

namespace SportifyApi.Services
{
    public class UserAchievementService : IUserAchievementService
    {
        private readonly AppDbContext _context;

        public UserAchievementService(AppDbContext context)
        {
            _context = context;
        }

        // Admin assigns predefined achievement to user
        public async Task<UserAchievement> AssignAchievementAsync(AssignAchievementDto dto)
        {
            var achievement = await _context.Achievements.FindAsync(dto.AchievementId);
            var awardingUser = await _context.Users.FindAsync(dto.AwardedByUserId); 
            
            if (awardingUser == null || awardingUser.UserType != "admin")
                throw new Exception("Only admins can assign achievements.");


            var alreadyAssigned = await _context.UserAchievements
                .AnyAsync(ua => ua.UserId == dto.UserId && ua.AchievementId == dto.AchievementId);

            if (alreadyAssigned)
                throw new Exception("User already has this achievement.");

            var userAchievement = new UserAchievement
            {
                AchievementId = dto.AchievementId,
                UserId = dto.UserId,
                EventId = dto.EventId,
                DateAwarded = DateTime.UtcNow
            };

            _context.UserAchievements.Add(userAchievement);
            await _context.SaveChangesAsync();
            return userAchievement;
        }

        // Fetch all achievements a user has earned
        public async Task<List<UserAchievement>> GetAchievementsByUserAsync(int userId)
        {
            return await _context.UserAchievements
                .Include(ua => ua.Achievement)
                .Where(ua => ua.UserId == userId)
                .ToListAsync();
        }

        // Auto-assign achievements like "First Event Joined", etc.
        public async Task CheckAutoAchievementsAsync(int userId)
        {
            var joinedCount = await _context.EventParticipants
                .CountAsync(ep => ep.UserId == userId);

            var allAutoAchievements = await _context.Achievements
                .Where(a => a.IsAutoGenerated)
                .ToListAsync();

            var alreadyEarned = await _context.UserAchievements
                .Where(ua => ua.UserId == userId)
                .Select(ua => ua.AchievementId)
                .ToListAsync();

            foreach (var achievement in allAutoAchievements)
            {
                if (alreadyEarned.Contains(achievement.AchievementId))
                    continue;

                if (achievement.Title == "First Event Joined" && joinedCount >= 1)
                {
                    _context.UserAchievements.Add(new UserAchievement
                    {
                        UserId = userId,
                        AchievementId = achievement.AchievementId,
                        EventId = null,
                        DateAwarded = DateTime.UtcNow
                    });
                }

                if (achievement.Title == "100 Events Joined" && joinedCount >= 100)
                {
                    _context.UserAchievements.Add(new UserAchievement
                    {
                        UserId = userId,
                        AchievementId = achievement.AchievementId,
                        EventId = null,
                        DateAwarded = DateTime.UtcNow
                    });
                }

                if (achievement.Title == "Joined 5 Events" && joinedCount >= 5)
                {
                    _context.UserAchievements.Add(new UserAchievement
                    {
                        UserId = userId,
                        AchievementId = achievement.AchievementId,
                        EventId = null,
                        DateAwarded = DateTime.UtcNow
                    });
                }


                // Add more conditions here (e.g., for sport-specific or role-based)
            }

            await _context.SaveChangesAsync();
        }
    }
}

