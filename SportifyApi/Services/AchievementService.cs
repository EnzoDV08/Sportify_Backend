using Microsoft.EntityFrameworkCore;
using SportifyApi.Data;
using SportifyApi.Dtos;
using SportifyApi.Interfaces;
using SportifyApi.Models;

namespace SportifyApi.Services
{
    public class AchievementService : IAchievementService
    {
        private readonly AppDbContext _context;

        public AchievementService(AppDbContext context)
        {
            _context = context;
        }

public async Task<IEnumerable<AchievementDto>> GetAllAchievementsAsync()
{
    return await _context.Achievements
        .Select(a => new AchievementDto
        {
            AchievementId = a.AchievementId,
            Title = a.Title,
            Description = a.Description,
            IconUrl = a.IconUrl,
            SportType = a.SportType,
            IsAutoGenerated = a.IsAutoGenerated,
            Points = a.Points,
            DateAwarded = null // Only used when tied to a user
        })
        .ToListAsync();
}


        public async Task<bool> CreateAchievementAsync(AchievementDto dto)
        {
            var achievement = new Achievement
            {
                Title = dto.Title,
                Description = dto.Description,
                SportType = dto.SportType
            };

            _context.Achievements.Add(achievement);
            return await _context.SaveChangesAsync() > 0;
        }

        public async Task<IEnumerable<AchievementDto>> GetAchievementsBySportAsync(string sport)
        {
            return await _context.Achievements
                .Where(a => a.SportType.ToLower() == sport.ToLower() && !a.IsAutoGenerated)
                .Select(a => new AchievementDto
                {
                    AchievementId = a.AchievementId,
                    Title = a.Title,
                    Description = a.Description,
                    IconUrl = a.IconUrl,
                    SportType = a.SportType,
                    IsAutoGenerated = a.IsAutoGenerated
                }).ToListAsync();
        }

        public async Task<bool> UnassignAchievementAsync(UnassignAchievementDto dto)
{
    var record = await _context.UserAchievements
        .FirstOrDefaultAsync(ua => ua.UserId == dto.UserId && ua.AchievementId == dto.AchievementId);

    if (record == null)
        return false;

    _context.UserAchievements.Remove(record);
    await _context.SaveChangesAsync();

    // ðŸª™ Optional: Subtract points from profile
    var profile = await _context.Profiles.FirstOrDefaultAsync(p => p.UserId == dto.UserId);
    var achievement = await _context.Achievements.FirstOrDefaultAsync(a => a.AchievementId == dto.AchievementId);
    if (profile != null && achievement != null)
    {
        profile.TotalPoints -= achievement.Points;
        if (profile.TotalPoints < 0) profile.TotalPoints = 0;
        await _context.SaveChangesAsync();
    }

    return true;
}


    }
}
