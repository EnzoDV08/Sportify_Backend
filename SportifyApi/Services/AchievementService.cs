using Microsoft.EntityFrameworkCore;
using SportifyApi.Data;
using SportifyApi.Dtos;
using SportifyApi.Interfaces;
using SportifyApi.Models;

namespace SportifyApi.Services
{
    public class AchievementService : IAchievementService
    {
        private readonly AppDbContext _context;

        public AchievementService(AppDbContext context)
        {
            _context = context;
        }

        public async Task<IEnumerable<AchievementDto>> GetAllAchievementsAsync()
        {
            return await _context.Achievements
                .Select(a => new AchievementDto
                {
                    Title = a.Title,
                    Description = a.Description,
                    SportType = a.SportType
                }).ToListAsync();
        }

        public async Task<bool> CreateAchievementAsync(AchievementDto dto)
        {
            var achievement = new Achievement
            {
                Title = dto.Title,
                Description = dto.Description,
                SportType = dto.SportType
            };

            _context.Achievements.Add(achievement);
            return await _context.SaveChangesAsync() > 0;
        }

                public async Task<IEnumerable<AchievementDto>> GetAchievementsBySportAsync(string sport)
        {
            return await _context.Achievements
                .Where(a => a.SportType.ToLower() == sport.ToLower() && !a.IsAutoGenerated)
                .Select(a => new AchievementDto
                {
                    AchievementId = a.AchievementId,
                    Title = a.Title,
                    Description = a.Description,
                    IconUrl = a.IconUrl,
                    SportType = a.SportType,
                    IsAutoGenerated = a.IsAutoGenerated
                }).ToListAsync();
        }


    }
}
