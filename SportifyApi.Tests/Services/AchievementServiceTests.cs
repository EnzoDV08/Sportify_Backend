using Xunit;
using SportifyApi.Services;
using SportifyApi.DTOs;
using SportifyApi.Models;
using Microsoft.EntityFrameworkCore;
using SportifyApi.Data;
using System.Threading.Tasks;
using System.Linq;

namespace SportifyApi.Tests.Services
{
    public class AchievementServiceTests
    {
        [Fact]
        public async Task CreateAchievementAsync_ShouldAddAchievementToDatabase()
        {
            var options = new DbContextOptionsBuilder<AppDbContext>()
                .UseInMemoryDatabase(Guid.NewGuid().ToString()) 
                .Options;

            using var context = new AppDbContext(options);
            var service = new AchievementService(context);

            var dto = new AchievementDto
            {
                Title = "Test Achievement",
                Description = "Testing achievement creation.",
                IsAutoGenerated = false
            };

            var result = await service.CreateAchievementAsync(dto);

            Assert.True(result);

            var achievement = context.Achievements.FirstOrDefault(a => a.Title == "Test Achievement");
            Assert.NotNull(achievement);
            Assert.Equal("Testing achievement creation.", achievement.Description);
        }

        [Fact]
        public async Task AssignToUserAsync_ShouldLinkUserAndAchievement()
        {
            var options = new DbContextOptionsBuilder<AppDbContext>()
                .UseInMemoryDatabase(Guid.NewGuid().ToString())
                .Options;

            using var context = new AppDbContext(options);

            var user = new User { UserId = 1 };
            var achievement = new Achievement { Title = "Assign Test", Description = "Assign testing", IsAutoGenerated = false };
            context.Users.Add(user);
            context.Achievements.Add(achievement);
            await context.SaveChangesAsync();

            var service = new AchievementService(context);

            var result = await service.AssignToUserAsync(new UserAchievementDto
            {
                UserId = user.UserId,
                AchievementId = achievement.AchievementId
            });

            Assert.True(result);

            var userAchievement = context.UserAchievements
                .FirstOrDefault(ua => ua.UserId == user.UserId && ua.AchievementId == achievement.AchievementId);

            Assert.NotNull(userAchievement);
        }

        [Fact]
        public async Task GetUserAchievementsAsync_ShouldReturnUserAchievements()
        {
            var options = new DbContextOptionsBuilder<AppDbContext>()
                .UseInMemoryDatabase(Guid.NewGuid().ToString()) 
                .Options;

            using var context = new AppDbContext(options);

            var user = new User { UserId = 1 };
            var achievement = new Achievement { Title = "Owned Achv", Description = "Already earned", IsAutoGenerated = false };
            context.Users.Add(user);
            context.Achievements.Add(achievement);
            await context.SaveChangesAsync();

            context.UserAchievements.Add(new UserAchievement
            {
                UserId = user.UserId,
                AchievementId = achievement.AchievementId
            });
            await context.SaveChangesAsync();

            var service = new AchievementService(context);
            var result = await service.GetUserAchievementsAsync(user.UserId);

            Assert.NotEmpty(result);
            Assert.Contains(result, a => a.Title == "Owned Achv");
        }

       [Fact]
public async Task CheckAutoAchievementsAsync_ShouldAssignAutoAchievementOnJoin()
{
    var options = new DbContextOptionsBuilder<AppDbContext>()
        .UseInMemoryDatabase(Guid.NewGuid().ToString()) 
        .Options;

    using var context = new AppDbContext(options);

    // Step 1: Create user and auto achievement
    var user = new User { UserId = 1 };
    var autoAchievement = new Achievement
    {
        Title = "Auto First Join",
        Description = "Joined first event",
        IsAutoGenerated = true
    };

    context.Users.Add(user);
    context.Achievements.Add(autoAchievement);

    // Step 2: Add fake event participant to simulate event join
    context.EventParticipants.Add(new EventParticipant
    {
        EventId = 123,
        UserId = user.UserId
    });

    await context.SaveChangesAsync();

    // Step 3: Call the method
    var service = new AchievementService(context);
    await service.CheckAutoAchievementsAsync(user.UserId);

    // 🔍 Step 4: Debug what's in the DB
    var all = context.UserAchievements.ToList();
    Console.WriteLine("UserAchievements:");
    foreach (var a in all)
    {
        Console.WriteLine($"UserId: {a.UserId}, AchievementId: {a.AchievementId}");
    }

    // Step 5: Check
    var assigned = context.UserAchievements.FirstOrDefault(ua =>
        ua.UserId == user.UserId && ua.AchievementId == autoAchievement.AchievementId);

    Assert.NotNull(assigned); // Still failing? Then no assignment was made
}

    }
}
