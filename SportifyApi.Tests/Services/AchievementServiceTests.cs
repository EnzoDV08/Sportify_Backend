using Moq;
using Xunit;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using SportifyApi.Data;
using SportifyApi.Services;
using SportifyApi.Models;
using SportifyApi.Dtos;

namespace SportifyApi.Tests.Services
{
    public class AchievementServiceTests
    {
        private async Task<AppDbContext> GetInMemoryDbContextAsync()
        {
            var options = new DbContextOptionsBuilder<AppDbContext>()
                .UseInMemoryDatabase(databaseName: "SportifyTestDB_" + System.Guid.NewGuid())
                .Options;

            var context = new AppDbContext(options);

            // Seed one achievement
            context.Achievements.Add(new Achievement
            {
                Title = "Test Title",
                Description = "Test Description",
                SportType = "Soccer",
                IconUrl = "icon.png",
                IsAutoGenerated = false
            });

            await context.SaveChangesAsync();
            return context;
        }

        [Fact]
        public async Task GetAllAchievementsAsync_ReturnsListOfAchievements()
        {
            // Arrange
            var context = await GetInMemoryDbContextAsync();
            var service = new AchievementService(context);

            // Act
            var result = await service.GetAllAchievementsAsync();

            // Assert
            Assert.NotNull(result);
            Assert.Single(result);
            Assert.Contains(result, a => a.Title == "Test Title");
        }

        [Fact]
        public async Task CreateAchievementAsync_AddsNewAchievement()
        {
            // Arrange
            var context = await GetInMemoryDbContextAsync();
            var service = new AchievementService(context);

            var newAchievement = new AchievementDto
            {
                Title = "üèÜ MVP",
                Description = "Most valuable player",
                SportType = "Basketball"
            };

            // Act
            var result = await service.CreateAchievementAsync(newAchievement);
            var allAchievements = await service.GetAllAchievementsAsync();

            // Assert
            Assert.True(result);
            Assert.Equal(2, allAchievements.Count());
        }

        [Fact]
        public async Task GetAchievementsBySportAsync_ReturnsCorrectSport()
        {
            // Arrange
            var context = await GetInMemoryDbContextAsync();
            var service = new AchievementService(context);

            // Act
            var result = await service.GetAchievementsBySportAsync("Soccer");

            // Assert
            Assert.Single(result);
            Assert.Equal("Soccer", result.First().SportType);
        }
    }
}
