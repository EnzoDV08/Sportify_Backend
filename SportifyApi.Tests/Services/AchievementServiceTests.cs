using System.Collections.Generic;
using System.Threading.Tasks;
using Moq;
using SportifyApi.Dtos;
using SportifyApi.Interfaces;
using SportifyApi.Models;
using SportifyApi.Services;
using Xunit;
using Microsoft.EntityFrameworkCore;
using SportifyApi.Data;
using System.Linq;

namespace SportifyApi.Test.Services
{
    public class AchievementServiceTests
    {
        private readonly AppDbContext _context;
        private readonly AchievementService _service;

        public AchievementServiceTests()
        {
            var options = new DbContextOptionsBuilder<AppDbContext>()
                .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString())
                .Options;

            _context = new AppDbContext(options);
            _service = new AchievementService(_context);
        }

        [Fact]
public async Task CreateAchievementAsync_AddsAchievement()
{
    // Arrange
    var dbOptions = new DbContextOptionsBuilder<AppDbContext>()
        .UseInMemoryDatabase(Guid.NewGuid().ToString()) // Ensures isolation
        .Options;

    using var context = new AppDbContext(dbOptions);
    var service = new AchievementService(context);

    var dto = new AchievementDto
    {
        AchievementId = 101,
        Title = "Goal Machine",
        Description = "Scored 5+ goals",
        SportType = "Soccer",
        IconUrl = "https://icon.png",
        IsAutoGenerated = true,
        Points = 25
    };

    // Act
    var result = await service.CreateAchievementAsync(dto);

    // Assert
    Assert.True(result);
    var saved = await context.Achievements.FirstOrDefaultAsync(a => a.Title == "Goal Machine");
    Assert.NotNull(saved);
    Assert.Equal("Goal Machine", saved.Title);
}

        [Fact]
        public async Task GetAllAchievementsAsync_ReturnsList()
        {
            _context.Achievements.Add(new Achievement
            {
                AchievementId = 200,
                Title = "Fastest Runner",
                Description = "Completed in record time",
                SportType = "Track",
                Points = 30
            });
            await _context.SaveChangesAsync();

            var result = await _service.GetAllAchievementsAsync();

            Assert.Single(result);
            Assert.Equal("Fastest Runner", result.First().Title);

        }
    }
}
