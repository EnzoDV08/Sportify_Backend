using Xunit;
using Moq;
using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using SportifyApi.Data;
using SportifyApi.Models;
using SportifyApi.Dtos;
using SportifyApi.Services;

namespace SportifyApi.Tests.Services
{
    public class UserAchievementServiceTests
    {
        private async Task<AppDbContext> GetDbContextAsync()
        {
            var options = new DbContextOptionsBuilder<AppDbContext>()
                .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString())
                .Options;

            var context = new AppDbContext(options);
            await context.Database.EnsureCreatedAsync();
            return context;
        }

        [Fact]
        public async Task AssignAchievement_ShouldThrow_IfNotAdminUser2()
        {
            var context = await GetDbContextAsync();

            // Add non-admin user and achievement
            context.Users.Add(new User { UserId = 3, UserType = "user" });
            context.Users.Add(new User { UserId = 2, UserType = "admin" });
            context.Achievements.Add(new Achievement { AchievementId = 1, Title = "MVP", SportType = "Soccer", Description = "", IconUrl = "" });
            await context.SaveChangesAsync();

            var service = new UserAchievementService(context);

            var dto = new AssignAchievementDto
            {
                AwardedByUserId = 3, // NOT userId 2
                AchievementId = 1,
                UserId = 1
            };

            await Assert.ThrowsAsync<Exception>(() => service.AssignAchievementAsync(dto));
        }

        [Fact]
        public async Task AssignAchievement_ShouldAdd_WhenAdminUser2()
        {
            var context = await GetDbContextAsync();

            context.Users.Add(new User { UserId = 2, UserType = "admin" });
            context.Users.Add(new User { UserId = 5, UserType = "user" });
            context.Achievements.Add(new Achievement { AchievementId = 99, Title = "Goal King", SportType = "Soccer", Description = "", IconUrl = "" });
            await context.SaveChangesAsync();

            var service = new UserAchievementService(context);

            var dto = new AssignAchievementDto
            {
                AwardedByUserId = 2,
                AchievementId = 99,
                UserId = 5
            };

            var result = await service.AssignAchievementAsync(dto);

            Assert.NotNull(result);
            Assert.Equal(99, result.AchievementId);
            Assert.Equal(5, result.UserId);
        }

        [Fact]
        public async Task CheckAutoAchievements_ShouldAdd_GeneralMilestone()
        {
            var context = await GetDbContextAsync();

            var userId = 10;

            context.Users.Add(new User { UserId = userId });
            context.Achievements.Add(new Achievement { AchievementId = 1, Title = "Joined 2 Events", SportType = "General", IsAutoGenerated = true });
            context.Events.Add(new Event { EventId = 100, SportType = "Soccer" });
            context.Events.Add(new Event { EventId = 101, SportType = "Soccer" });

            context.EventParticipants.AddRange(
                new EventParticipant { EventId = 100, UserId = userId, Status = "Approved" },
                new EventParticipant { EventId = 101, UserId = userId, Status = "Approved" }
            );

            await context.SaveChangesAsync();

            var service = new UserAchievementService(context);
            await service.CheckAutoAchievementsAsync(userId);

            var achievements = await context.UserAchievements.ToListAsync();

            Assert.Single(achievements);
            Assert.Equal("Joined 2 Events", achievements[0].Achievement.Title);
        }

        [Fact]
        public async Task CheckAutoAchievements_ShouldAdd_SportTypeMatch()
        {
            var context = await GetDbContextAsync();
            var userId = 11;

            context.Users.Add(new User { UserId = userId });
            context.Achievements.Add(new Achievement { AchievementId = 55, Title = "üèâ Man of the Match", SportType = "Rugby", IsAutoGenerated = true });
            context.Events.Add(new Event { EventId = 201, SportType = "Rugby" });

            context.EventParticipants.Add(new EventParticipant
            {
                EventId = 201,
                UserId = userId,
                Status = "Approved"
            });

            await context.SaveChangesAsync();

            var service = new UserAchievementService(context);
            await service.CheckAutoAchievementsAsync(userId);

            var earned = await context.UserAchievements.ToListAsync();
            Assert.Single(earned);
            Assert.Equal("üèâ Man of the Match", earned[0].Achievement.Title);
        }
    }
}
