using Microsoft.EntityFrameworkCore;
using SportifyApi.Data;
using SportifyApi.Dtos;
using SportifyApi.Models;
using SportifyApi.Services;
using System;
using System.Linq;
using System.Threading.Tasks;
using Xunit;

namespace SportifyApi.Test.Services
{
    public class UserAchievementServiceTests
    {
        private AppDbContext GetInMemoryDb()
        {
            var options = new DbContextOptionsBuilder<AppDbContext>()
                .UseInMemoryDatabase("UserAchievementTestDb_" + Guid.NewGuid())
                .Options;

            return new AppDbContext(options);
        }

        [Fact]
        public async Task AssignAchievementAsync_ShouldAssign_WhenValidAdmin()
        {
            var context = GetInMemoryDb();
            var service = new UserAchievementService(context);

            context.Users.Add(new User { UserId = 2, Name = "Admin" });
            context.Users.Add(new User { UserId = 3, Name = "Player" });
            context.Profiles.Add(new Profile { UserId = 3, TotalPoints = 0 });
            context.Achievements.Add(new Achievement { AchievementId = 1, Title = "Test", Points = 100 });
            await context.SaveChangesAsync();

            var dto = new AssignAchievementDto
            {
                AwardedByUserId = 2,
                UserId = 3,
                AchievementId = 1
            };

            var result = await service.AssignAchievementAsync(dto);

            Assert.NotNull(result);
            Assert.Equal(3, result.UserId);
            Assert.Equal(1, result.AchievementId);

            var profile = await context.Profiles.FirstAsync(p => p.UserId == 3);
            Assert.Equal(100, profile.TotalPoints);
        }

        [Fact]
        public async Task GetAchievementsByUserAsync_ShouldReturnAchievements()
        {
            var context = GetInMemoryDb();
            var service = new UserAchievementService(context);

            context.UserAchievements.Add(new UserAchievement
            {
                UserId = 4,
                AchievementId = 1,
                Achievement = new Achievement { Title = "Sample", Points = 50 }
            });
            await context.SaveChangesAsync();

            var achievements = await service.GetAchievementsByUserAsync(4);

            Assert.Single(achievements);
            Assert.Equal("Sample", achievements[0].Achievement.Title);
        }

        [Fact]
        public async Task UnassignAchievementAsync_ShouldRemoveAndDeductPoints()
        {
            var context = GetInMemoryDb();
            var service = new UserAchievementService(context);

            context.Achievements.Add(new Achievement { AchievementId = 2, Title = "To Remove", Points = 30 });
            context.UserAchievements.Add(new UserAchievement { UserId = 5, AchievementId = 2 });
            context.Profiles.Add(new Profile { UserId = 5, TotalPoints = 30 });
            await context.SaveChangesAsync();

            var dto = new UnassignAchievementDto { UserId = 5, AchievementId = 2 };
            var result = await service.UnassignAchievementAsync(dto);

            Assert.True(result);
            var profile = await context.Profiles.FirstAsync(p => p.UserId == 5);
            Assert.Equal(0, profile.TotalPoints);
        }

        [Fact]
        public async Task CheckAutoAchievementsAsync_ShouldAssignAchievements_WhenConditionsMet()
        {
            var context = GetInMemoryDb();
            var service = new UserAchievementService(context);

            context.Users.Add(new User { UserId = 1, Name = "Auto User" });

            context.EventParticipants.AddRange(
                new EventParticipant { UserId = 1, Status = "Approved", Event = new Event { SportType = "Basketball" } },
                new EventParticipant { UserId = 1, Status = "Approved", Event = new Event { SportType = "Basketball" } }
            );

            context.Achievements.AddRange(
                new Achievement { AchievementId = 1, Title = "First Event Joined", IsAutoGenerated = true, Points = 10 },
                new Achievement { AchievementId = 2, Title = "Joined 2 Events", IsAutoGenerated = true, Points = 20 },
                new Achievement { AchievementId = 3, Title = "Basketball Player", SportType = "Basketball", IsAutoGenerated = true, Points = 30 }
            );

            context.Profiles.Add(new Profile { UserId = 1, TotalPoints = 0 });
            await context.SaveChangesAsync();

            await service.CheckAutoAchievementsAsync(1);

            var achievements = await context.UserAchievements.Where(ua => ua.UserId == 1).ToListAsync();
            var profile = await context.Profiles.FirstAsync(p => p.UserId == 1);

            Assert.Equal(3, achievements.Count);
            Assert.Equal(60, profile.TotalPoints); // 10 + 20 + 30
        }
    }
}
